# automatically generated by the FlatBuffers compiler, do not modify

# namespace: apemodefb

import flatbuffers

class FileFb(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFileFb(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FileFb()
        x.Init(buf, n + offset)
        return x

    # FileFb
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FileFb
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FileFb
    def NameId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FileFb
    def Buffer(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # FileFb
    def BufferAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # FileFb
    def BufferLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def FileFbStart(builder): builder.StartObject(3)
def FileFbAddId(builder, id): builder.PrependUint32Slot(0, id, 0)
def FileFbAddNameId(builder, nameId): builder.PrependUint32Slot(1, nameId, 0)
def FileFbAddBuffer(builder, buffer): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(buffer), 0)
def FileFbStartBufferVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def FileFbEnd(builder): return builder.EndObject()
