# automatically generated by the FlatBuffers compiler, do not modify

# namespace: apemodefb

import flatbuffers

class MaterialFb(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMaterialFb(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MaterialFb()
        x.Init(buf, n + offset)
        return x

    # MaterialFb
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MaterialFb
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MaterialFb
    def NameId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MaterialFb
    def Properties(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 8
            from .MaterialPropFb import MaterialPropFb
            obj = MaterialPropFb()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MaterialFb
    def PropertiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MaterialFb
    def TextureProperties(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 8
            from .MaterialPropFb import MaterialPropFb
            obj = MaterialPropFb()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MaterialFb
    def TexturePropertiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def MaterialFbStart(builder): builder.StartObject(4)
def MaterialFbAddId(builder, id): builder.PrependUint32Slot(0, id, 0)
def MaterialFbAddNameId(builder, nameId): builder.PrependUint32Slot(1, nameId, 0)
def MaterialFbAddProperties(builder, properties): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(properties), 0)
def MaterialFbStartPropertiesVector(builder, numElems): return builder.StartVector(8, numElems, 4)
def MaterialFbAddTextureProperties(builder, textureProperties): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(textureProperties), 0)
def MaterialFbStartTexturePropertiesVector(builder, numElems): return builder.StartVector(8, numElems, 4)
def MaterialFbEnd(builder): return builder.EndObject()
