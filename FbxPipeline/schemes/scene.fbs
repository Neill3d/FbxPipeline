
namespace apemodefb;

enum EVersion : uint {
    Value = 3
}
enum ECullingType : uint
{
	CullingOff,
	CullingOnCCW,
	CullingOnCW
}
enum EWrapMode : uint {
    Repeat,
    Clamp
}
enum EBlendMode : uint {
    Translucent,
    Additive,
    Modulate,
    Modulate2,
    Over
}
enum EVertexFormat : uint {
    Static,
	Packed,
}
enum EIndexTypeFb : uint {
	UInt16,
	UInt16Compressed,
	UInt32,
	UInt32Compressed,
	Count,
}
enum EMaterialPropTypeFb : uint {
	Scalar,
	Color,
	Texture,
	Video,
}
enum EAnimCurveProperty : uint {
	LclTranslation,
    RotationOffset,
    RotationPivot,
    PreRotation,
    PostRotation,
    LclRotation,
    ScalingOffset,
    ScalingPivot,
    LclScaling,
    GeometricTranslation,
    GeometricRotation,
    GeometricScaling
}
enum EAnimCurveChannel : uint {
	X,
    Y,
    Z,
}
enum EInterpolationMode : uint {
	Const, Linear, Cubic
}

struct vec2 {
    x : float;
    y : float;
}
struct vec3 {
    x : float;
    y : float;
    z : float;
}
struct vec4 {
    x : float;
    y : float;
    z : float;
    w : float;
}
struct mat4 {
    x : vec4;
    y : vec4;
    z : vec4;
    w : vec4;
}
struct StaticVertexFb {
    position : vec3;
    normal : vec3;
    tangent : vec4;
    uv : vec2;
}
struct PackedVertexFb {
    position : uint;
    normal : uint;
    tangent : uint;
    uv : uint;
}
struct StaticSkinnedVertexFb {
    position : vec3;
    normal : vec3;
    tangent : vec4;
    uv : vec2;
    weights : vec4;
    indices : vec4;
}
struct PackedSkinnedVertexFb {
    position : uint;
    normal : uint;
    tangent : uint;
    uv : uint;
    weights : uint;
    indices : uint;
}
struct AnimCurveKeyFb {
    time : float;
    value : float;
}
table AnimCurveFb {
    id : uint;
    name_id : ulong( key );
	stack_name_id : ulong;
	layer_name_id : ulong;
	keys : [AnimCurveKeyFb];
}
struct TextureFb {
    id : uint;
    name_id : ulong( key );
    file_id : uint;
    blend_mode : EBlendMode;
    wrap_mode_u : EWrapMode;
    wrap_mode_v : EWrapMode;
    offset_u : float;
    offset_v : float;
    scale_u : float;
    scale_v : float;
}
struct SubmeshFb {
	bbox_min : vec3;
	bbox_max : vec3;
	position_offset : vec3;
	position_scale : vec3;
	uv_offset : vec2;
	uv_scale : vec2;
    base_vertex : uint;
    vertex_count : uint;
    base_index : uint;
    index_count : uint;
    base_subset : ushort;
    subset_count : ushort;
    vertex_format : EVertexFormat;
    vertex_stride : ushort;
}
struct SubsetFb {
    material_id : uint;
    base_index : uint;
    index_count : uint;
}
table NameFb {
	h : ulong( key );
	v : string;
}
struct TransformFb {
    translation : vec3;
    rotation_offset : vec3;
    rotation_pivot : vec3;
    pre_rotation : vec3;
    post_rotation : vec3;
    rotation : vec3;
    scaling_offset : vec3;
    scaling_pivot : vec3;
    scaling : vec3;
    geometric_translation : vec3;
    geometric_rotation : vec3;
    geometric_scaling : vec3;
}
struct AnimTransformFb {
    translation : uint;
    rotation_offset : uint;
    rotation_pivot : uint;
    pre_rotation : uint;
    post_rotation : uint;
    rotation : uint;
    scaling_offset : uint;
    scaling_pivot : uint;
    scaling : uint;
    geometric_translation : uint;
    geometric_rotation : uint;
    geometric_scaling : uint;
}
struct SkinFb {
    name_id : ulong( key );
	bind_pose : mat4;
}
table MeshFb {
    vertices : [ubyte];
    submeshes : [SubmeshFb];
    subsets : [SubsetFb];
    indices : [ubyte];
    index_type : EIndexTypeFb;
    skins : [SkinFb];
}
struct MaterialPropFb {
    name_id : ulong( key );
    type : EMaterialPropTypeFb;
    value : vec3;
}
table MaterialFb {
    id : uint;
    name_id : ulong( key );
    props : [MaterialPropFb];
}
table NodeFb {
    id : uint;
    mesh_id : uint;
    anim_transform_id : uint;
    name_id : ulong( key );
	culling_type : ECullingType;
    child_ids : [uint];
    material_ids : [uint];
}
table FileFb {
	id : uint;
    name_id : ulong( key );
	buffer : [ubyte];
}
table SceneFb {
    transforms : [TransformFb];
    anim_transforms : [AnimTransformFb];
    nodes : [NodeFb];
    meshes : [MeshFb];
    anim_curves : [AnimCurveFb];
    materials : [MaterialFb];
    textures : [TextureFb];
    files : [FileFb];
    names : [NameFb];
}

root_type SceneFb;
file_extension "apemode";
file_identifier "FBXP";