
namespace fbxp.fb;

//
// Structs
//

struct vec2 {
	x	:float;
	y	:float;
}
struct vec3 {
	x	:float;
	y	:float;
	z	:float;
}
struct vec4 {
	x	:float;
	y	:float;
	z	:float;
	w	:float;
}
struct StaticVertexFb {
	position	:vec3;
	normal		:vec3;
	tangent		:vec4;
	texCoords	:vec2;
}
enum EWrapMode : uint {
    Repeat,
    Clamp
}
enum EBlendMode : uint {
    Translucent,
    Additive,
    Modulate,
    Modulate2,
    Over
}
struct TextureFb {
    id : uint;
    name_id : ulong;
    source_id : ulong;
    blend_mode : EBlendMode;
    wrap_mode_u : EWrapMode;
    wrap_mode_v : EWrapMode;
    offset_u : float;
    offset_v : float;
    scale_u : float;
    scale_v : float;
}
enum EVertexFormat : uint {
    Static
}
struct SubmeshFb {
    base_vertex : uint;
    vertex_count : uint;
    base_index : uint;
    index_count : uint;
    base_subset : ushort;
    subset_count : ushort;
    vertex_format : EVertexFormat;
    vertex_stride : ushort;
}
struct SubsetFb {
    material_id : uint;
    base_index : uint;
    index_count : uint;
}
enum EVertexTypeFb : uint {
	Static,
	StaticCompressed,
	Count,
}
enum EIndexTypeFb : uint {
	UInt16,
	UInt16Compressed,
	UInt32,
	UInt32Compressed,
	Count,
}

//
// Tables
//

table NameFb {
	h : ulong( key );
	v : string;
}

// (force_align:16)
struct TransformFb {
	translation				:vec3;
	rotation_offset			:vec3;
	rotation_pivot			:vec3;
	pre_rotation			:vec3;
	post_rotation			:vec3;
	rotation				:vec3;
	scaling_offset			:vec3;
	scaling_pivot			:vec3;
	scaling					:vec3;
	geometric_translation	:vec3;
	geometric_rotation		:vec3;
	geometric_scaling		:vec3;
}
table MeshFb {
	polygons			:[uint];
	ctrl_points			:[vec3];
	vertices			:[ubyte];
	indices				:[ubyte];
	submeshes			:[SubmeshFb];
	subsets				:[SubsetFb];
	subset_indices		:[uint];
	index_type			:EIndexTypeFb;
}
enum EMaterialPropTypeFb : uint {
	Scalar,
	Color,
	Texture,
	Video,
}
struct MaterialPropFb {
	name_id	:ulong;
	type	:EMaterialPropTypeFb;
	value	:vec3;
}
table MaterialFb {
	id		:uint;
	name_id	:ulong;
	props	:[MaterialPropFb];
}
table NodeFb {
	id				:uint;
	child_ids		:[uint];
	material_ids	:[uint];
	mesh_id			:uint;
	name_id			:ulong;
}
table SceneFb {
	transforms	:[TransformFb];
	nodes		:[NodeFb];
	meshes		:[MeshFb];
	materials	:[MaterialFb];
	textures	:[TextureFb];
	names		:[NameFb];
}

root_type		SceneFb;
file_extension	"fbxp";
file_identifier "FBXP";