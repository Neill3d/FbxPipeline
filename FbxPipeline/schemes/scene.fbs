
namespace fbxp.fb;

enum EVersion : uint {
    Value = 2
}
enum ECullingType : uint
{
	CullingOff,
	CullingOnCCW,
	CullingOnCW
}
enum EWrapMode : uint {
    Repeat,
    Clamp
}
enum EBlendMode : uint {
    Translucent,
    Additive,
    Modulate,
    Modulate2,
    Over
}
enum EVertexFormat : uint {
    Static,
	Packed,
}
enum EIndexTypeFb : uint {
	UInt16,
	UInt16Compressed,
	UInt32,
	UInt32Compressed,
	Count,
}
enum EMaterialPropTypeFb : uint {
	Scalar,
	Color,
	Texture,
	Video,
}

struct vec2 {
    x : float;
    y : float;
}
struct vec3 {
    x : float;
    y : float;
    z : float;
}
struct vec4 {
    x : float;
    y : float;
    z : float;
    w : float;
}
struct StaticVertexFb {
    position : vec3;
    normal : vec3;
    tangent : vec4;
    texCoords : vec2;
}
struct PackedVertexFb {
    position : vec3;
    normal : uint;
    tangent : uint;
    texCoords : uint;
}
struct TextureFb {
    id : uint;
    name_id : ulong( key );
    source_id : ulong;
    blend_mode : EBlendMode;
    wrap_mode_u : EWrapMode;
    wrap_mode_v : EWrapMode;
    offset_u : float;
    offset_v : float;
    scale_u : float;
    scale_v : float;
}
struct SubmeshFb {
    base_vertex : uint;
    vertex_count : uint;
    base_index : uint;
    index_count : uint;
    base_subset : ushort;
    subset_count : ushort;
    vertex_format : EVertexFormat;
    vertex_stride : ushort;
}
struct SubsetFb {
    material_id : uint;
    base_index : uint;
    index_count : uint;
}
table NameFb {
	h : ulong( key );
	v : string;
}
// (force_align:16)
struct TransformFb {
    translation : vec3;
    rotation_offset : vec3;
    rotation_pivot : vec3;
    pre_rotation : vec3;
    post_rotation : vec3;
    rotation : vec3;
    scaling_offset : vec3;
    scaling_pivot : vec3;
    scaling : vec3;
    geometric_translation : vec3;
    geometric_rotation : vec3;
    geometric_scaling : vec3;
}
table MeshFb {
    vertices : [ubyte];
    submeshes : [SubmeshFb];
    subsets : [SubsetFb];
    subset_indices : [ubyte];
    subset_index_type : EIndexTypeFb;
}
struct MaterialPropFb {
    name_id : ulong( key );
    type : EMaterialPropTypeFb;
    value : vec3;
}
table MaterialFb {
    id : uint;
    name_id : ulong( key );
    props : [MaterialPropFb];
}
table NodeFb {
    id : uint;
    child_ids : [uint];
    material_ids : [uint];
    mesh_id : uint;
    name_id : ulong;
	culling_type : ECullingType;
}
table SceneFb {
    transforms : [TransformFb];
    nodes : [NodeFb];
    meshes : [MeshFb];
    materials : [MaterialFb];
    textures : [TextureFb];
    names : [NameFb];
}

root_type SceneFb;
file_extension "fbxp";
file_identifier "FBXP";